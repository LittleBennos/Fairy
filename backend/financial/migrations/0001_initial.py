# Generated by Django 4.2.16 on 2025-09-30 19:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import financial.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('scheduling', '0001_initial'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(default=financial.models.generate_invoice_number, help_text='Unique invoice number (auto-generated)', max_length=20, unique=True)),
                ('billing_contact_name', models.CharField(help_text='Billing contact name at time of invoice', max_length=200)),
                ('billing_email', models.EmailField(help_text='Email for invoice delivery', max_length=254)),
                ('billing_address', models.TextField(help_text='Full billing address')),
                ('issue_date', models.DateField(help_text='Date invoice was issued')),
                ('due_date', models.DateField(help_text='Payment due date')),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal before tax', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Tax rate as percentage (e.g., 10.00 for 10%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_amount', models.DecimalField(decimal_places=2, help_text='Tax amount', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total', models.DecimalField(decimal_places=2, help_text='Total amount due (subtotal + tax)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount paid so far', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent'), ('paid', 'Paid'), ('partially_paid', 'Partially Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='draft', help_text='Invoice status', max_length=20)),
                ('late_fee_applied', models.DecimalField(decimal_places=2, default=0.0, help_text='Late fees applied to this invoice', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this invoice')),
                ('customer_notes', models.TextField(blank=True, help_text='Notes visible to customer on invoice')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(help_text='The account being invoiced', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='accounts.account')),
                ('term', models.ForeignKey(blank=True, help_text='Term this invoice is for (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='scheduling.term')),
            ],
            options={
                'ordering': ['-issue_date', '-invoice_number'],
            },
        ),
        migrations.CreateModel(
            name='PaymentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount to be paid', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('installment_amount', models.DecimalField(decimal_places=2, help_text='Amount per installment', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('frequency', models.CharField(choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-Weekly'), ('monthly', 'Monthly')], help_text='Payment frequency', max_length=20)),
                ('number_of_installments', models.IntegerField(help_text='Total number of installments', validators=[django.core.validators.MinValueValidator(2)])),
                ('start_date', models.DateField(help_text='Date payment plan starts')),
                ('end_date', models.DateField(help_text='Expected completion date')),
                ('first_payment_date', models.DateField(help_text='Date of first installment')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('defaulted', 'Defaulted'), ('cancelled', 'Cancelled')], default='active', help_text='Payment plan status', max_length=20)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount paid so far', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('installments_paid', models.IntegerField(default=0, help_text='Number of installments paid', validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Notes about this payment plan')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(help_text='Account this payment plan belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='payment_plans', to='accounts.account')),
                ('approved_by', models.ForeignKey(blank=True, help_text='Staff member who approved this payment plan', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_plans_approved', to='accounts.staff')),
                ('invoice', models.ForeignKey(blank=True, help_text='Invoice this payment plan is for (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_plans', to='financial.invoice')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['account', 'status'], name='financial_p_account_8c7527_idx'), models.Index(fields=['status'], name='financial_p_status_0dada6_idx'), models.Index(fields=['start_date'], name='financial_p_start_d_ee500d_idx'), models.Index(fields=['invoice'], name='financial_p_invoice_e05654_idx')],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_reference', models.CharField(default=financial.models.generate_payment_reference, help_text='Unique payment reference (auto-generated)', max_length=20, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('payment_date', models.DateField(help_text='Date payment was received')),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('check', 'Check'), ('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('bank_transfer', 'Bank Transfer'), ('paypal', 'PayPal'), ('stripe', 'Stripe'), ('other', 'Other')], help_text='Payment method used', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], default='completed', help_text='Payment status', max_length=20)),
                ('transaction_id', models.CharField(blank=True, help_text='External transaction ID (e.g., from payment gateway)', max_length=200)),
                ('notes', models.TextField(blank=True, help_text='Notes about this payment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invoice', models.ForeignKey(help_text='Invoice this payment is for', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='financial.invoice')),
                ('received_by', models.ForeignKey(blank=True, help_text='Staff member who received/processed this payment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments_received', to='accounts.staff')),
            ],
            options={
                'ordering': ['-payment_date', '-payment_reference'],
                'indexes': [models.Index(fields=['payment_reference'], name='financial_p_payment_678814_idx'), models.Index(fields=['invoice', 'status'], name='financial_p_invoice_e5e79b_idx'), models.Index(fields=['payment_date'], name='financial_p_payment_0dd4fe_idx'), models.Index(fields=['status'], name='financial_p_status_71a042_idx'), models.Index(fields=['transaction_id'], name='financial_p_transac_0e234e_idx')],
            },
        ),
        migrations.CreateModel(
            name='InvoiceLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('enrollment', 'Enrollment Fee'), ('late_fee', 'Late Fee'), ('discount', 'Discount'), ('adjustment', 'Adjustment'), ('other', 'Other')], help_text='Type of line item', max_length=20)),
                ('description', models.CharField(help_text='Description of the item', max_length=500)),
                ('quantity', models.IntegerField(default=1, help_text='Quantity', validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('total', models.DecimalField(decimal_places=2, help_text='Total for this line item (quantity × unit_price)', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enrollment', models.ForeignKey(blank=True, help_text='Enrollment this line item is for (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoice_line_items', to='scheduling.enrollment')),
                ('invoice', models.ForeignKey(help_text='Invoice this line item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='line_items', to='financial.invoice')),
            ],
            options={
                'ordering': ['invoice', 'item_type', 'description'],
                'indexes': [models.Index(fields=['invoice'], name='financial_i_invoice_66f1e0_idx'), models.Index(fields=['enrollment'], name='financial_i_enrollm_58bf92_idx'), models.Index(fields=['item_type'], name='financial_i_item_ty_f05f98_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='financial_i_invoice_4a5a41_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['account', 'status'], name='financial_i_account_b05954_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['status'], name='financial_i_status_c36524_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['issue_date'], name='financial_i_issue_d_13e769_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date'], name='financial_i_due_dat_48a32a_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['term'], name='financial_i_term_id_7c5d23_idx'),
        ),
    ]

# Generated by Django 4.2.16 on 2025-09-30 19:41

import accounts.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('people', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_notes', models.TextField(blank=True, help_text='Medical conditions, medications, etc.')),
                ('allergies', models.TextField(blank=True, help_text='Known allergies')),
                ('photo_consent', models.BooleanField(default=False, help_text='Consent for photos/videos')),
                ('school_attending', models.CharField(blank=True, help_text='School name', max_length=200)),
                ('year_level', models.CharField(blank=True, help_text='Year/Grade level', max_length=50)),
                ('status', models.CharField(choices=[('prospect', 'Prospect'), ('trial', 'Trial'), ('active', 'Active'), ('waitlist', 'Waitlist'), ('left', 'Left')], default='prospect', help_text='Student status', max_length=20)),
                ('start_date', models.DateField(blank=True, help_text='Date started with studio', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about student')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('person', models.OneToOneField(help_text='Person this student role belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='student', to='people.person')),
            ],
            options={
                'ordering': ['person__family_name', 'person__given_name'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hire_date', models.DateField(help_text='Date of hire')),
                ('termination_date', models.DateField(blank=True, help_text='Date of termination (if applicable)', null=True)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('teacher', 'Teacher'), ('front_desk', 'Front Desk')], default='teacher', help_text='Staff role', max_length=20)),
                ('bio', models.TextField(blank=True, help_text='Staff biography')),
                ('specialties', models.TextField(blank=True, help_text='Dance specialties (e.g., Ballet, Jazz)')),
                ('certifications', models.TextField(blank=True, help_text='Certifications and qualifications')),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('on_leave', 'On Leave'), ('terminated', 'Terminated')], default='active', help_text='Current employment status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('person', models.OneToOneField(help_text='Person this staff role belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='people.person')),
            ],
            options={
                'verbose_name': 'Staff',
                'verbose_name_plural': 'Staff',
                'ordering': ['person__family_name', 'person__given_name'],
            },
        ),
        migrations.CreateModel(
            name='Guardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authorized_for_pickup', models.BooleanField(default=True, help_text='Authorized to pick up student from classes')),
                ('communication_preference', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('phone', 'Phone'), ('portal', 'Portal')], default='email', help_text='Preferred communication method', max_length=20)),
                ('relationship_notes', models.TextField(blank=True, help_text='Notes about relationship to student(s)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('person', models.OneToOneField(help_text='Person this guardian role belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='guardian', to='people.person')),
            ],
            options={
                'ordering': ['person__family_name', 'person__given_name'],
            },
        ),
        migrations.CreateModel(
            name='BillingContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('billing_address_line1', models.CharField(blank=True, max_length=255)),
                ('billing_address_line2', models.CharField(blank=True, max_length=255)),
                ('billing_city', models.CharField(blank=True, max_length=100)),
                ('billing_state', models.CharField(blank=True, max_length=50)),
                ('billing_postal_code', models.CharField(blank=True, max_length=20)),
                ('billing_country', models.CharField(blank=True, max_length=100)),
                ('payment_method', models.CharField(choices=[('card', 'Credit/Debit Card'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('other', 'Other')], default='card', help_text='Preferred payment method', max_length=20)),
                ('billing_preference', models.CharField(choices=[('email', 'Email'), ('pdf', 'PDF Download'), ('paper', 'Paper/Mail'), ('portal', 'Portal')], default='email', help_text='How to receive invoices', max_length=20)),
                ('payment_notes', models.TextField(blank=True, help_text='Payment-related notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('person', models.OneToOneField(help_text='Person this billing contact role belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='billing_contact', to='people.person')),
            ],
            options={
                'ordering': ['person__family_name', 'person__given_name'],
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_code', models.CharField(default=accounts.models.generate_account_code, help_text='Unique account code (auto-generated)', max_length=20, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('closed', 'Closed')], default='active', help_text='Account status', max_length=20)),
                ('start_date', models.DateField(help_text='Account start date')),
                ('end_date', models.DateField(blank=True, help_text='Account end date (if closed)', null=True)),
                ('notes', models.TextField(blank=True, help_text='Account notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('billing_contact', models.ForeignKey(help_text='Billing contact for payments', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='accounts.billingcontact')),
                ('guardian', models.ForeignKey(help_text='Guardian responsible for this student', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='accounts.guardian')),
                ('student', models.ForeignKey(help_text='Student enrolled in this account', on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='accounts.student')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['status'], name='accounts_st_status_123de0_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['person'], name='accounts_st_person__d25ecb_idx'),
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['employment_status'], name='accounts_st_employm_eae2d3_idx'),
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['role'], name='accounts_st_role_784d61_idx'),
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['person'], name='accounts_st_person__bb7506_idx'),
        ),
        migrations.AddIndex(
            model_name='guardian',
            index=models.Index(fields=['person'], name='accounts_gu_person__17a402_idx'),
        ),
        migrations.AddIndex(
            model_name='billingcontact',
            index=models.Index(fields=['person'], name='accounts_bi_person__260ecc_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['account_code'], name='accounts_ac_account_784891_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['status'], name='accounts_ac_status_07de41_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['student'], name='accounts_ac_student_a26cee_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['guardian'], name='accounts_ac_guardia_8e2cd0_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['billing_contact'], name='accounts_ac_billing_2c2e3a_idx'),
        ),
    ]

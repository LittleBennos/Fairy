# Generated by Django 4.2.16 on 2025-09-30 19:41

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of week (0=Monday, 6=Sunday)')),
                ('start_time', models.TimeField(help_text='Class start time')),
                ('end_time', models.TimeField(help_text='Class end time')),
                ('room', models.CharField(blank=True, help_text='Studio/room name', max_length=100)),
                ('max_students', models.IntegerField(default=15, help_text='Maximum number of students', validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='scheduled', help_text='Current status of the class', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this class instance')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['term', 'day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Term name (e.g., Spring 2025)', max_length=100)),
                ('code', models.CharField(help_text='Unique term code (e.g., 2025-SPRING)', max_length=50, unique=True)),
                ('start_date', models.DateField(help_text='First day of term')),
                ('end_date', models.DateField(help_text='Last day of term')),
                ('enrollment_open_date', models.DateField(blank=True, help_text='When enrollment opens for this term', null=True)),
                ('enrollment_close_date', models.DateField(blank=True, help_text='When enrollment closes for this term', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this term currently active?')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about the term')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-start_date'],
                'indexes': [models.Index(fields=['code'], name='scheduling__code_eaa5af_idx'), models.Index(fields=['start_date', 'end_date'], name='scheduling__start_d_0eb31f_idx'), models.Index(fields=['is_active'], name='scheduling__is_acti_028362_idx')],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Genre name (e.g., Ballet)', max_length=100, unique=True)),
                ('code', models.CharField(help_text='Unique genre code (e.g., BAL)', max_length=20, unique=True)),
                ('description', models.TextField(blank=True, help_text='Genre description')),
                ('is_active', models.BooleanField(default=True, help_text='Is this genre currently offered?')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about the genre')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['code'], name='scheduling__code_c7c328_idx'), models.Index(fields=['is_active'], name='scheduling__is_acti_d30c3c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('applied', 'Applied'), ('trial', 'Trial'), ('active', 'Active'), ('withdrawn', 'Withdrawn'), ('completed', 'Completed')], default='applied', help_text='Current enrollment status', max_length=20)),
                ('enrollment_date', models.DateField(auto_now_add=True, help_text='Date of initial enrollment/application')),
                ('trial_date', models.DateField(blank=True, help_text='Date trial status was granted', null=True)),
                ('active_date', models.DateField(blank=True, help_text='Date enrollment became active', null=True)),
                ('withdrawn_date', models.DateField(blank=True, help_text='Date student withdrew', null=True)),
                ('completed_date', models.DateField(blank=True, help_text='Date enrollment was completed (end of term)', null=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount paid for this enrollment', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True, help_text='Notes about this enrollment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(help_text='The account enrolling in the class', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='accounts.account')),
                ('class_instance', models.ForeignKey(help_text='The class instance', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='scheduling.classinstance')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClassType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Class type name (e.g., Level 1 Ballet)', max_length=200)),
                ('code', models.CharField(help_text='Unique class type code (e.g., BAL-L1)', max_length=50, unique=True)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('elementary', 'Elementary'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('pre_professional', 'Pre-Professional')], max_length=50)),
                ('description', models.TextField(blank=True, help_text='Class type description')),
                ('min_age', models.IntegerField(help_text='Minimum age in years', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_age', models.IntegerField(blank=True, help_text='Maximum age in years (optional)', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_minutes', models.IntegerField(default=60, help_text='Class duration in minutes', validators=[django.core.validators.MinValueValidator(1)])),
                ('price_per_term', models.DecimalField(decimal_places=2, help_text='Price per term (in dollars)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True, help_text='Is this class type currently offered?')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about the class type')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genre', models.ForeignKey(help_text='The dance genre this class belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='class_types', to='scheduling.genre')),
            ],
            options={
                'ordering': ['genre', 'level', 'name'],
            },
        ),
        migrations.AddField(
            model_name='classinstance',
            name='class_type',
            field=models.ForeignKey(help_text='The class type this class is based on', on_delete=django.db.models.deletion.PROTECT, related_name='class_instances', to='scheduling.classtype'),
        ),
        migrations.AddField(
            model_name='classinstance',
            name='teacher',
            field=models.ForeignKey(blank=True, help_text='Teacher assigned to this class', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='classes_taught', to='accounts.staff'),
        ),
        migrations.AddField(
            model_name='classinstance',
            name='term',
            field=models.ForeignKey(help_text='The term this class runs in', on_delete=django.db.models.deletion.PROTECT, related_name='class_instances', to='scheduling.term'),
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the class session')),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused')], default='present', help_text='Attendance status', max_length=20)),
                ('marked_at', models.DateTimeField(auto_now=True, help_text='When attendance was marked/last updated')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about attendance (e.g., reason for absence)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_instance', models.ForeignKey(help_text='The class instance this attendance is for', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='scheduling.classinstance')),
                ('enrollment', models.ForeignKey(help_text='The enrollment this attendance is linked to', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='scheduling.enrollment')),
                ('marked_by', models.ForeignKey(blank=True, help_text='Staff member who marked this attendance', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='marked_attendance_records', to='accounts.staff')),
                ('student', models.ForeignKey(help_text='The student this attendance record is for', on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='accounts.student')),
            ],
            options={
                'ordering': ['-date', 'class_instance', 'student'],
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_achieved', models.CharField(choices=[('beginner', 'Beginner'), ('elementary', 'Elementary'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('pre_professional', 'Pre-Professional')], help_text='Skill level achieved by student for this genre', max_length=50)),
                ('evaluation_date', models.DateField(help_text='Date of evaluation')),
                ('notes', models.TextField(blank=True, help_text='Notes about the evaluation (strengths, areas for improvement, etc.)')),
                ('expires_on', models.DateField(blank=True, help_text='Expiry date for this evaluation (optional)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evaluated_by', models.ForeignKey(help_text='Staff member who conducted this evaluation', on_delete=django.db.models.deletion.PROTECT, related_name='evaluations_conducted', to='accounts.staff')),
                ('genre', models.ForeignKey(help_text='The dance genre being evaluated', on_delete=django.db.models.deletion.PROTECT, related_name='evaluations', to='scheduling.genre')),
                ('student', models.ForeignKey(help_text='The student being evaluated', on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='accounts.student')),
            ],
            options={
                'ordering': ['-evaluation_date', 'student', 'genre'],
                'indexes': [models.Index(fields=['student', 'genre'], name='scheduling__student_2be4c1_idx'), models.Index(fields=['genre', 'level_achieved'], name='scheduling__genre_i_37e3ed_idx'), models.Index(fields=['evaluation_date'], name='scheduling__evaluat_72cb46_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['account', 'status'], name='scheduling__account_8cb4b5_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['class_instance', 'status'], name='scheduling__class_i_94d3bb_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['status'], name='scheduling__status_d48066_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('account', 'class_instance')},
        ),
        migrations.AddIndex(
            model_name='classtype',
            index=models.Index(fields=['code'], name='scheduling__code_c00ccb_idx'),
        ),
        migrations.AddIndex(
            model_name='classtype',
            index=models.Index(fields=['genre', 'level'], name='scheduling__genre_i_3c3726_idx'),
        ),
        migrations.AddIndex(
            model_name='classtype',
            index=models.Index(fields=['is_active'], name='scheduling__is_acti_3283c5_idx'),
        ),
        migrations.AddIndex(
            model_name='classinstance',
            index=models.Index(fields=['class_type', 'term'], name='scheduling__class_t_a852ad_idx'),
        ),
        migrations.AddIndex(
            model_name='classinstance',
            index=models.Index(fields=['term', 'day_of_week'], name='scheduling__term_id_d16dc9_idx'),
        ),
        migrations.AddIndex(
            model_name='classinstance',
            index=models.Index(fields=['teacher'], name='scheduling__teacher_e59076_idx'),
        ),
        migrations.AddIndex(
            model_name='classinstance',
            index=models.Index(fields=['status'], name='scheduling__status_a2e8d1_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['class_instance', 'date'], name='scheduling__class_i_b52582_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['student', 'date'], name='scheduling__student_295a54_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['enrollment', 'date'], name='scheduling__enrollm_f3b5fa_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['status'], name='scheduling__status_0407d9_idx'),
        ),
        migrations.AddIndex(
            model_name='attendancerecord',
            index=models.Index(fields=['date'], name='scheduling__date_ce1be5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attendancerecord',
            unique_together={('class_instance', 'student', 'date')},
        ),
    ]
